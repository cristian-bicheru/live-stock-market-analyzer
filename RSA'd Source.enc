-CmltcG9ydCBqc29uCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgdGltZQppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IG9zCgpkZWYgc2VuZChtc2cpOgogICAgb3Muc3lzdGVtKCdjdXJsIGh0dHBzOi8vbm90aWZ5LnJ1bi9nQXRCZmdJSGhkMkNzWjV3IC1kICInICsgbXNnICsgJyInKQoKc2VuZCgic3RvY2sgYW5hbHl6ZXIgc3RhcnRlZCIpCiNleGFtcGxlOiBodHRwczovL2FwaS5pZXh0cmFkaW5nLmNvbS8xLjAvc3RvY2svbWFya2V0L2JhdGNoP3N5bWJvbHM9YWFwbCxmYiZ0eXBlcz1jaGFydCZyYW5nZT0xZCZsYXN0PTUKCnVybHAxID0gImh0dHBzOi8vYXBpLmlleHRyYWRpbmcuY29tLzEuMC9zdG9jay9tYXJrZXQvYmF0Y2g/c3ltYm9scz0iCnVybHAyID0gIiZ0eXBlcz1jaGFydCZyYW5nZT0xZCZsYXN0PTUiCnVybHAzID0gIiZ0eXBlcz1jaGFydCZyYW5nZT0xeSZsYXN0PTUiCgpzdG9ja3MgPSAoIkFNWk4iLCAiR09PRyIsICJBQVBMIiwgIk1TRlQiLCAiTlZEQSIsICJBTUQiKQoKcGF1c2VsaXN0ID0ge30KCnN0b2NrU3RyaW5nID0gIiIKZm9yIHN0b2NrIGluIHN0b2NrczoKICAgIHBhdXNlbGlzdFtzdG9ja10gPSAwCiAgICBzdG9ja1N0cmluZyA9IHN0b2NrU3RyaW5nICsgc3RvY2sgKyAiLCIKCnVybCA9IHVybHAxK3N0b2NrU3RyaW5nK3VybHAyCnllYXJ1cmwgPSB1cmxwMStzdG9ja1N0cmluZyt1cmxwMwp5ZWFyZGF0YSA9IHJlcXVlc3RzLmdldCh5ZWFydXJsKS5qc29uKCkKCmRlZiBsb3dTaW5jZShkYXRhLCBwcmljZSk6CiAgICBmb3IgZGF5IGluIHJhbmdlKGxlbihkYXRhKS0xLCAwLCAtMSk6CiAgICAgICAgZGlmZiA9IGRhdGFbZGF5XVsiY2xvc2UiXS1wcmljZQogICAgICAgIGlmIGRpZmYgPD0gMDoKICAgICAgICAgICAgcmV0dXJuIGRhdGFbZGF5XVsibGFiZWwiXQogICAgICAgICAgICBicmVhawogICAgICAgICAgICAKCndoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgICAgZGF0YSA9IHJlcXVlc3RzLmdldCh1cmwpLmpzb24oKQogICAgICAgIGN1cnJlbnREYXRlID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgICAgICBjdXJyZW50SG91ciA9IGN1cnJlbnREYXRlLmhvdXIKICAgICAgICBjdXJyZW50TWludXRlID0gY3VycmVudERhdGUubWludXRlCiAgICAgICAgY29udCA9IDEKCiAgICAgICAgbm90b3BlbiA9IGN1cnJlbnREYXRlLndlZWtkYXkoKQogICAgICAgIGlmIG5vdG9wZW4gPj0gNSBvciAoY3VycmVudERhdGUud2Vla2RheSgpID09IDQgYW5kIGN1cnJlbnRIb3VyID49IDE2KToKICAgICAgICAgICAgbmV4dE9wZW4gPSBjdXJyZW50RGF0ZQogICAgICAgICAgICBpZiBuZXh0T3Blbi5pc293ZWVrZGF5KCkgaW4gc2V0KCg2LCA3KSk6CiAgICAgICAgICAgICAgICBuZXh0T3BlbiArPSBkYXRldGltZS50aW1lZGVsdGEoZGF5cz04IC0gbmV4dE9wZW4uaXNvd2Vla2RheSgpKQogICAgICAgICAgICBuZXh0T3BlbiA9IG5leHRPcGVuLnJlcGxhY2UoaG91cj05LCBtaW51dGU9MzApCiAgICAgICAgICAgIHNlbmQoInNsZWVwaW5nIGZvciB0aGUgd2Vla2VuZCwgd2FrZWluZyBpbiAiICsgc3RyKChuZXh0T3Blbi1jdXJyZW50RGF0ZSkudG90YWxfc2Vjb25kcygpKzEyMikgKyAiIHNlY29uZHMiKQogICAgICAgICAgICB5ZWFyZGF0YSA9IHJlcXVlc3RzLmdldCh5ZWFydXJsKS5qc29uKCkKICAgICAgICAgICAgZm9yIGVhY2ggaW4gcGF1c2VsaXN0LmtleXMoKToKICAgICAgICAgICAgICAgIHBhdXNlbGlzdFtlYWNoXSA9IDAKICAgICAgICAgICAgdGltZS5zbGVlcCgobmV4dE9wZW4tY3VycmVudERhdGUpLnRvdGFsX3NlY29uZHMoKSsxMjIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgY3VycmVudEhvdXIgPj0gMTY6CiAgICAgICAgICAgICAgICBuZXh0T3BlbiA9IChjdXJyZW50RGF0ZStkYXRldGltZS50aW1lZGVsdGEoZGF5cz0xKSkucmVwbGFjZShob3VyPTksIG1pbnV0ZT0zMCkKICAgICAgICAgICAgICAgIHNlbmQoIm1hcmtldCBjbG9zZWQsIHNsZWVwaW5nIGZvciAiICsgc3RyKChuZXh0T3Blbi1jdXJyZW50RGF0ZSkudG90YWxfc2Vjb25kcygpKzEyMikgKyAiIHNlY29uZHMiKQogICAgICAgICAgICAgICAgeWVhcmRhdGEgPSByZXF1ZXN0cy5nZXQoeWVhcnVybCkuanNvbigpCiAgICAgICAgICAgICAgICBjb250ID0gMAogICAgICAgICAgICAgICAgZm9yIGVhY2ggaW4gcGF1c2VsaXN0LmtleXMoKToKICAgICAgICAgICAgICAgICAgICBwYXVzZWxpc3RbZWFjaF0gPSAwCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKChuZXh0T3Blbi1jdXJyZW50RGF0ZSkudG90YWxfc2Vjb25kcygpKzEyMikKICAgICAgICAgICAgZWxpZiBjdXJyZW50SG91ciA8IDk6CiAgICAgICAgICAgICAgICBuZXh0T3BlbiA9IGN1cnJlbnREYXRlLnJlcGxhY2UoaG91cj05LCBtaW51dGU9MzApCiAgICAgICAgICAgICAgICBzZW5kKCJtYXJrZXQgY2xvc2VkLCBzbGVlcGluZyBmb3IgIiArIHN0cigobmV4dE9wZW4tY3VycmVudERhdGUpLnRvdGFsX3NlY29uZHMoKSsxMjIpICsgIiBzZWNvbmRzIikKICAgICAgICAgICAgICAgIHllYXJkYXRhID0gcmVxdWVzdHMuZ2V0KHllYXJ1cmwpLmpzb24oKQogICAgICAgICAgICAgICAgY29udCA9IDAKICAgICAgICAgICAgICAgIGZvciBlYWNoIGluIHBhdXNlbGlzdC5rZXlzKCk6CiAgICAgICAgICAgICAgICAgICAgcGF1c2VsaXN0W2VhY2hdID0gMAogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgobmV4dE9wZW4tY3VycmVudERhdGUpLnRvdGFsX3NlY29uZHMoKSsxMjIpCiAgICAgICAgICAgIGVsaWYgY3VycmVudEhvdXIgPT0gOToKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRNaW51dGUgPCAzMDoKICAgICAgICAgICAgICAgICAgICBuZXh0T3BlbiA9IGN1cnJlbnREYXRlLnJlcGxhY2UoaG91cj05LCBtaW51dGU9MzApCiAgICAgICAgICAgICAgICAgICAgc2VuZCgibWFya2V0IGNsb3NlZCwgc2xlZXBpbmcgZm9yICIgKyBzdHIoKG5leHRPcGVuLWN1cnJlbnREYXRlKS50b3RhbF9zZWNvbmRzKCkrMTIyKSArICIgc2Vjb25kcyIpCiAgICAgICAgICAgICAgICAgICAgeWVhcmRhdGEgPSByZXF1ZXN0cy5nZXQoeWVhcnVybCkuanNvbigpCiAgICAgICAgICAgICAgICAgICAgY29udCA9IDAKICAgICAgICAgICAgICAgICAgICBmb3IgZWFjaCBpbiBwYXVzZWxpc3Qua2V5cygpOgogICAgICAgICAgICAgICAgICAgICAgICBwYXVzZWxpc3RbZWFjaF0gPSAwCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgobmV4dE9wZW4tY3VycmVudERhdGUpLnRvdGFsX3NlY29uZHMoKSsxMjIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGNvbnQgPSAxCiAgICAgICAgICAgIGlmIGNvbnQgPT0gMToKICAgICAgICAgICAgICAgIG1pbk9wZW4gPSAoY3VycmVudERhdGUgLSBjdXJyZW50RGF0ZS5yZXBsYWNlKGhvdXI9OSwgbWludXRlPTMwKSkudG90YWxfc2Vjb25kcygpLzYwCiAgICAgICAgICAgICAgICBzZW5kKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKSkrIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgICAgICAgICAgICAgIGZvciBzdG9jayBpbiBzdG9ja3M6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBpZiBwYXVzZWxpc3Rbc3RvY2tdID4gMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlbGlzdFtzdG9ja10gPSBwYXVzZWxpc3Rbc3RvY2tdLTEKICAgICAgICAgICAgICAgICAgICAgICAgc0RhdGEgPSBsaXN0KGRhdGFbc3RvY2tdWyJjaGFydCJdKQogICAgICAgICAgICAgICAgICAgICAgICBDZGF0YSA9IHNEYXRhWy0yXQogICAgICAgICAgICAgICAgICAgICAgICBMZGF0YSA9IHNEYXRhWy0zXQogICAgICAgICAgICAgICAgICAgICAgICBPZGF0YSA9IHNEYXRhWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhID0gbGlzdCh5ZWFyZGF0YVtzdG9ja11bImNoYXJ0Il0pCiAgICAgICAgICAgICAgICAgICAgICAgIHBjdENoYW5nZSA9IENkYXRhWyJjaGFuZ2VPdmVyVGltZSJdCiAgICAgICAgICAgICAgICAgICAgICAgIHBjdENoZ1RvRGF0ZSA9IHJvdW5kKChDZGF0YVsiY2xvc2UiXS15RGF0YVstMV1bImNsb3NlIl0pL3lEYXRhWy0xXVsiY2xvc2UiXSoxMDAsIDIpCiAgICAgICAgICAgICAgICAgICAgICAgICMgZGV0ZWN0cyBhY3RpdnR5IGluIHN0b2NrCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5TWV0ZXIgPSBhYnMocGN0Q2hnVG9EYXRlKSoxMDAwL21pbk9wZW4KICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICAgICAgICAgICAgICBpZiBhY3Rpdml0eU1ldGVyID49IDIuNCBhbmQgcGF1c2VsaXN0W3N0b2NrXSA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGN0Q2hnVG9EYXRlIDwgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YSA9IGxpc3QoeWVhcmRhdGFbc3RvY2tdWyJjaGFydCJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3REYXlUaGlzTG93ID0gbG93U2luY2UoeURhdGEsIENkYXRhWyJjbG9zZSJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoc3RvY2srIiBoYXMgY2hhbmdlZCBieSAiICsgc3RyKHBjdENoZ1RvRGF0ZSkgKyAiIHNvIGZhciwgY3VycmVudCBwcmljZTogIiArIHN0cihDZGF0YVsiY2xvc2UiXSkgKyAiLCBvcGVuZWQgYXQ6ICIgKyBzdHIoT2RhdGFbIm1hciQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZChzdG9jaysiIGhhcyBjaGFuZ2VkIGJ5ICIgKyBzdHIocGN0Q2hnVG9EYXRlKSArICIgc28gZmFyLCBjdXJyZW50IHByaWNlOiAiICsgc3RyKENkYXRhWyJjbG9zZSJdKSArICIsIG9wZW5lZCBhdDogIiArIHN0cihPZGF0YVsibWFyJAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VsaXN0W3N0b2NrXSA9IDEyCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBzZW5kKHN0cihkYXRldGltZS5kYXRldGltZS5ub3coKSkrIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMzAyKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICBwcmludCgiRXhjZXB0aW9uIGVuY291bnRlcmVkIGluIHByb2dyYW06ICIgKyBzdHIoZXgpKQ=
